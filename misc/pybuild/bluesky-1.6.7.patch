diff --git a/bluesky/plan_stubs.py b/bluesky/plan_stubs.py
index accab012..ad973936 100644
--- a/bluesky/plan_stubs.py
+++ b/bluesky/plan_stubs.py
@@ -1108,6 +1108,8 @@ def one_nd_step(detectors, step, pos_cache, take_reading=trigger_and_read):
 
         Defaults to `trigger_and_read`
     """
+    if pos_cache["super_step"]:
+        step.update(pos_cache["super_step"])
     motors = step.keys()
     yield from move_per_step(step, pos_cache)
     yield from take_reading(list(detectors) + list(motors))
diff --git a/bluesky/plans.py b/bluesky/plans.py
index b718cbb2..4f24ec79 100644
--- a/bluesky/plans.py
+++ b/bluesky/plans.py
@@ -68,8 +68,7 @@ def count(detectors, num=1, delay=None, *, per_shot=None, md=None):
     if per_shot is None:
         per_shot = bps.one_shot
 
-    @bpp.stage_decorator(detectors)
-    @bpp.run_decorator(md=_md)
+    @bpp.stage_run_decorator(detectors, md=_md)
     def inner_count():
         return (yield from bps.repeat(partial(per_shot, detectors),
                                       num=num, delay=delay))
@@ -77,7 +76,8 @@ def count(detectors, num=1, delay=None, *, per_shot=None, md=None):
     return (yield from inner_count())
 
 
-def list_scan(detectors, *args, per_step=None, md=None):
+def list_scan(detectors, *args, per_step=None,
+              md=None, pos_cache=None, frag=False):
     """
     Scan over one or more variables in steps simultaneously (inner product).
 
@@ -173,11 +173,11 @@ def list_scan(detectors, *args, per_step=None, md=None):
 
     full_cycler = plan_patterns.inner_list_product(args)
 
-    return (yield from scan_nd(detectors, full_cycler, per_step=per_step,
-                               md=_md))
+    return scan_nd(detectors, full_cycler, per_step=per_step,
+                   md=_md, pos_cache=pos_cache, frag=frag)
 
 
-def rel_list_scan(detectors, *args, per_step=None, md=None):
+def rel_list_scan(detectors, *args, per_step=None, md=None, pos_cache=None):
     """
     Scan over one variable in steps relative to current position.
 
@@ -225,11 +225,12 @@ def rel_list_scan(detectors, *args, per_step=None, md=None):
     @bpp.relative_set_decorator(motors)
     def inner_relative_list_scan():
         return (yield from list_scan(detectors, *args, per_step=per_step,
-                                     md=_md))
+                                     md=_md, pos_cache=pos_cache))
     return (yield from inner_relative_list_scan())
 
 
-def list_grid_scan(detectors, *args, snake_axes=False, per_step=None, md=None):
+def list_grid_scan(detectors, *args, snake_axes=False, per_step=None,
+                   md=None, pos_cache=None, frag=False):
     """
     Scan over a mesh; each motor is on an independent trajectory.
 
@@ -300,12 +301,12 @@ def list_grid_scan(detectors, *args, snake_axes=False, per_step=None, md=None):
     except (AttributeError, KeyError):
         ...
 
-    return (yield from scan_nd(detectors, full_cycler,
-                               per_step=per_step, md=_md))
+    return scan_nd(detectors, full_cycler, per_step=per_step,
+                   md=_md, pos_cache=pos_cache, frag=frag)
 
 
 def rel_list_grid_scan(detectors, *args, snake_axes=False, per_step=None,
-                       md=None):
+                       md=None, pos_cache=None):
     """
     Scan over a mesh; each motor is on an independent trajectory. Each point is
     relative to the current position.
@@ -357,7 +358,8 @@ def rel_list_grid_scan(detectors, *args, snake_axes=False, per_step=None,
     def inner_relative_list_grid_scan():
         return (yield from list_grid_scan(detectors, *args,
                                           snake_axes=snake_axes,
-                                          per_step=per_step, md=_md))
+                                          per_step=per_step, md=_md,
+                                          pos_cache=pos_cache))
     return (yield from inner_relative_list_grid_scan())
 
 
@@ -414,8 +416,7 @@ def _scan_1d(detectors, motor, start, stop, num, *, per_step=None, md=None):
 
     steps = np.linspace(**_md['plan_pattern_args'])
 
-    @bpp.stage_decorator(list(detectors) + [motor])
-    @bpp.run_decorator(md=_md)
+    @bpp.stage_run_decorator(list(detectors) + [motor], md=_md)
     def inner_scan():
         for step in steps:
             yield from per_step(detectors, motor, step)
@@ -516,8 +517,7 @@ def log_scan(detectors, motor, start, stop, num, *, per_step=None, md=None):
 
     steps = np.logspace(**_md['plan_pattern_args'])
 
-    @bpp.stage_decorator(list(detectors) + [motor])
-    @bpp.run_decorator(md=_md)
+    @bpp.stage_run_decorator(list(detectors) + [motor], md=_md)
     def inner_log_scan():
         for step in steps:
             yield from per_step(detectors, motor, step)
@@ -626,8 +626,7 @@ def adaptive_scan(detectors, target_field, motor, start, stop,
     else:
         _md['hints'].setdefault('dimensions', dimensions)
 
-    @bpp.stage_decorator(list(detectors) + [motor])
-    @bpp.run_decorator(md=_md)
+    @bpp.stage_run_decorator(list(detectors) + [motor], md=_md)
     def adaptive_core():
         next_pos = start
         step = (max_step - min_step) / 2
@@ -821,8 +820,7 @@ def tune_centroid(
     low_limit = min(start, stop)
     high_limit = max(start, stop)
 
-    @bpp.stage_decorator(list(detectors) + [motor])
-    @bpp.run_decorator(md=_md)
+    @bpp.stage_run_decorator(list(detectors) + [motor], md=_md)
     def _tune_core(start, stop, num, signal):
         next_pos = start
         step = (stop - start) / (num - 1)
@@ -870,7 +868,8 @@ def tune_centroid(
     return (yield from _tune_core(start, stop, num, signal))
 
 
-def scan_nd(detectors, cycler, *, per_step=None, md=None):
+def scan_nd(detectors, cycler, *, per_step=None,
+            md=None, pos_cache=None, frag=False):
     """
     Scan over an arbitrary N-dimensional trajectory.
 
@@ -988,16 +987,20 @@ def scan_nd(detectors, cycler, *, per_step=None, md=None):
                             "<Signature (detectors, step, pos_cache)> or "
                             "<Signature (detectors, motor, step)>. \n"
                             "per_step signature received: {}".format(sig))
-    pos_cache = defaultdict(lambda: None)  # where last position is stashed
+    if pos_cache is None:  # where last position is stashed
+        pos_cache = defaultdict(lambda: None)
     cycler = utils.merge_cycler(cycler)
     motors = list(cycler.keys)
 
-    @bpp.stage_decorator(list(detectors) + motors)
-    @bpp.run_decorator(md=_md)
-    def inner_scan_nd():
-        for step in list(cycler):
-            yield from per_step(detectors, step, pos_cache)
-
+    if frag:
+        def inner_scan_nd():
+            for step in list(cycler):
+                yield per_step(detectors, step, pos_cache)
+    else:
+        @bpp.stage_run_decorator(list(detectors) + motors, md=_md)
+        def inner_scan_nd():
+            for step in list(cycler):
+                yield from per_step(detectors, step, pos_cache)
     return (yield from inner_scan_nd())
 
 
@@ -1009,7 +1012,8 @@ def inner_product_scan(detectors, num, *args, per_step=None, md=None):
     yield from scan(detectors, *args, num, per_step=None, md=md)
 
 
-def scan(detectors, *args, num=None, per_step=None, md=None):
+def scan(detectors, *args, num=None, per_step=None,
+         md=None, pos_cache=None, frag=False):
     """
     Scan over one multi-motor trajectory.
 
@@ -1092,7 +1096,7 @@ def scan(detectors, *args, num=None, per_step=None, md=None):
 
     default_dimensions = [(x_fields, 'primary')]
 
-    default_hints = {}
+    default_hints = {'progress': ['simple', num]}
     if len(x_fields) > 0:
         default_hints.update(dimensions=default_dimensions)
 
@@ -1103,11 +1107,12 @@ def scan(detectors, *args, num=None, per_step=None, md=None):
 
     full_cycler = plan_patterns.inner_product(num=num, args=args)
 
-    return (yield from scan_nd(detectors, full_cycler,
-                               per_step=per_step, md=_md))
+    return scan_nd(detectors, full_cycler, per_step=per_step,
+                   md=_md, pos_cache=pos_cache, frag=frag)
 
 
-def grid_scan(detectors, *args, snake_axes=None, per_step=None, md=None):
+def grid_scan(detectors, *args, snake_axes=None, per_step=None,
+              md=None, pos_cache=None, frag=False):
     """
     Scan over a mesh; each motor is on an independent trajectory.
 
@@ -1201,18 +1206,6 @@ def grid_scan(detectors, *args, snake_axes=None, per_step=None, md=None):
                 raise ValueError(f"The list of axes 'snake_axes' contains repeated elements: "
                                  f"'{snake_axes}'")
 
-            # Check if the snaking is enabled for the slowest motor.
-            if len(motors) and (motors[0] in snake_axes):
-                raise ValueError(f"The list of axes 'snake_axes' contains the slowest motor: "
-                                 f"'{snake_axes}'")
-
-            # Check that all motors in the chunk_args are controlled in the scan.
-            #   It is very likely that the script running the plan has a bug.
-            if any([_ not in motors for _ in snake_axes]):
-                raise ValueError(f"The list of axes 'snake_axes' contains motors "
-                                 f"that are not controlled during the scan: "
-                                 f"'{snake_axes}'")
-
             # Enable snaking for the selected axes.
             #   If the argument `snake_axes` is specified (not None), then
             #   any `snakeX` values that could be specified in `args` are ignored.
@@ -1245,10 +1238,12 @@ def grid_scan(detectors, *args, snake_axes=None, per_step=None, md=None):
     full_cycler = plan_patterns.outer_product(args=args_modified)
 
     md_args = []
+    progress_nums = []
     motor_names = []
     motors = []
     for i, (motor, start, stop, num, snake) in enumerate(chunk_args):
         md_args.extend([repr(motor), start, stop, num])
+        progress_nums.append(num)
         if i > 0:
             # snake argument only shows up after the first motor
             md_args.append(snake)
@@ -1269,7 +1264,7 @@ def grid_scan(detectors, *args, snake_axes=None, per_step=None, md=None):
            'plan_pattern_args': dict(args=md_args),
            'plan_pattern_module': plan_patterns.__name__,
            'motors': tuple(motor_names),
-           'hints': {},
+           'hints': {'progress': ['simple'] + progress_nums},
            }
     _md.update(md or {})
     _md['hints'].setdefault('gridding', 'rectilinear')
@@ -1279,11 +1274,12 @@ def grid_scan(detectors, *args, snake_axes=None, per_step=None, md=None):
     except (AttributeError, KeyError):
         ...
 
-    return (yield from scan_nd(detectors, full_cycler,
-                               per_step=per_step, md=_md))
+    return scan_nd(detectors, full_cycler, per_step=per_step,
+                   md=_md, pos_cache=pos_cache, frag=frag)
 
 
-def rel_grid_scan(detectors, *args, snake_axes=None, per_step=None, md=None):
+def rel_grid_scan(detectors, *args, snake_axes=None,
+                  per_step=None, md=None, pos_cache=None):
     """
     Scan over a mesh relative to current position.
 
@@ -1334,7 +1330,8 @@ def rel_grid_scan(detectors, *args, snake_axes=None, per_step=None, md=None):
     def inner_rel_grid_scan():
         return (yield from grid_scan(detectors, *args,
                                      snake_axes=snake_axes,
-                                     per_step=per_step, md=_md))
+                                     per_step=per_step, md=_md,
+                                     pos_cache=pos_cache))
 
     return (yield from inner_rel_grid_scan())
 
@@ -1347,7 +1344,8 @@ def relative_inner_product_scan(detectors, num, *args, per_step=None, md=None):
     yield from rel_scan(detectors, *args, num, per_step=per_step, md=md)
 
 
-def rel_scan(detectors, *args, num=None, per_step=None, md=None):
+def rel_scan(detectors, *args, num=None,
+             per_step=None, md=None, pos_cache=None):
     """
     Scan over one multi-motor trajectory relative to current position.
 
@@ -1391,7 +1389,7 @@ def rel_scan(detectors, *args, num=None, per_step=None, md=None):
     @bpp.relative_set_decorator(motors)
     def inner_rel_scan():
         return (yield from scan(detectors, *args, num=num,
-                                per_step=per_step, md=_md))
+                                per_step=per_step, md=_md, pos_cache=pos_cache))
 
     return (yield from inner_rel_scan())
 
@@ -1437,8 +1435,7 @@ def tweak(detector, target_field, motor, step, *, md=None):
         def clear_output(wait=False):
             pass
 
-    @bpp.stage_decorator([detector, motor])
-    @bpp.run_decorator(md=_md)
+    @bpp.stage_run_decorator([detector, motor], md=_md)
     def tweak_core():
         nonlocal step
 
@@ -1475,7 +1472,7 @@ def tweak(detector, target_field, motor, step, *, md=None):
 
 def spiral_fermat(detectors, x_motor, y_motor, x_start, y_start, x_range,
                   y_range, dr, factor, *, dr_y=None, tilt=0.0, per_step=None,
-                  md=None):
+                  md=None, pos_cache=None, frag=False):
     '''Absolute fermat spiral scan, centered around (x_start, y_start)
 
     Parameters
@@ -1547,11 +1544,13 @@ def spiral_fermat(detectors, x_motor, y_motor, x_start, y_start, x_range,
         _md['hints'].update({'dimensions': dimensions})
     _md.update(md or {})
 
-    return (yield from scan_nd(detectors, cyc, per_step=per_step, md=_md))
+    return scan_nd(detectors, cyc, per_step=per_step,
+                   md=_md, pos_cache=pos_cache, frag=frag)
 
 
 def rel_spiral_fermat(detectors, x_motor, y_motor, x_range, y_range, dr,
-                      factor, *, dr_y=None, tilt=0.0, per_step=None, md=None):
+                      factor, *, dr_y=None, tilt=0.0, per_step=None,
+                      md=None, pos_cache=None):
     '''Relative fermat spiral scan
 
     Parameters
@@ -1598,13 +1597,15 @@ def rel_spiral_fermat(detectors, x_motor, y_motor, x_range, y_range, dr,
                                          0, 0,
                                          x_range, y_range,
                                          dr, factor, dr_y=dr_y, tilt=tilt,
-                                         per_step=per_step, md=_md))
+                                         per_step=per_step, md=_md,
+                                         pos_cache=pos_cache))
 
     return (yield from inner_relative_spiral_fermat())
 
 
-def spiral(detectors, x_motor, y_motor, x_start, y_start, x_range, y_range, dr,
-           nth, *, dr_y=None, tilt=0.0, per_step=None, md=None):
+def spiral(detectors, x_motor, y_motor, x_start, y_start,
+           x_range, y_range, dr, nth, *, dr_y=None, tilt=0.0,
+           per_step=None, md=None, pos_cache=None, frag=False):
     '''Spiral scan, centered around (x_start, y_start)
 
     Parameters
@@ -1674,11 +1675,12 @@ def spiral(detectors, x_motor, y_motor, x_start, y_start, x_range, y_range, dr,
         _md['hints'].update({'dimensions': dimensions})
     _md.update(md or {})
 
-    return (yield from scan_nd(detectors, cyc, per_step=per_step, md=_md))
+    return scan_nd(detectors, cyc, per_step=per_step,
+                   md=_md, pos_cache=pos_cache, frag=frag)
 
 
 def rel_spiral(detectors, x_motor, y_motor, x_range, y_range, dr, nth,
-               *, dr_y=None, tilt=0.0, per_step=None, md=None):
+               *, dr_y=None, tilt=0.0, per_step=None, md=None, pos_cache=None):
 
     '''Relative spiral scan
 
@@ -1723,13 +1725,15 @@ def rel_spiral(detectors, x_motor, y_motor, x_range, y_range, dr, nth,
                                   0, 0,
                                   x_range, y_range, dr, nth,
                                   dr_y=dr_y, tilt=tilt,
-                                  per_step=per_step, md=_md))
+                                  per_step=per_step, md=_md,
+                                  pos_cache=pos_cache))
 
     return (yield from inner_relative_spiral())
 
 
-def spiral_square(detectors, x_motor, y_motor, x_center, y_center, x_range,
-                  y_range, x_num, y_num, *, per_step=None, md=None):
+def spiral_square(detectors, x_motor, y_motor, x_center, y_center,
+                  x_range, y_range, x_num, y_num, *, per_step=None,
+                  md=None, pos_cache=None, frag=False):
     '''Absolute square spiral scan, centered around (x_center, y_center)
 
     Parameters
@@ -1796,11 +1800,12 @@ def spiral_square(detectors, x_motor, y_motor, x_center, y_center, x_range,
     except (AttributeError, KeyError):
         ...
 
-    return (yield from scan_nd(detectors, cyc, per_step=per_step, md=_md))
+    return scan_nd(detectors, cyc, per_step=per_step,
+                   md=_md, pos_cache=pos_cache, frag=frag)
 
 
 def rel_spiral_square(detectors, x_motor, y_motor, x_range, y_range,
-                      x_num, y_num, *, per_step=None, md=None):
+                      x_num, y_num, *, per_step=None, md=None, pos_cache=None):
     '''Relative square spiral scan, centered around current (x, y) position.
 
     Parameters
@@ -1843,7 +1848,8 @@ def rel_spiral_square(detectors, x_motor, y_motor, x_range, y_range,
         return (yield from spiral_square(detectors, x_motor, y_motor,
                                          0, 0,
                                          x_range, y_range, x_num, y_num,
-                                         per_step=per_step, md=_md))
+                                         per_step=per_step, md=_md,
+                                         pos_cache=pos_cache))
 
     return (yield from inner_relative_spiral())
 
diff --git a/bluesky/preprocessors.py b/bluesky/preprocessors.py
index 1c667daa..603139be 100644
--- a/bluesky/preprocessors.py
+++ b/bluesky/preprocessors.py
@@ -952,6 +952,47 @@ def stage_wrapper(plan, devices):
     return (yield from finalize_wrapper(inner(), unstage_devices()))
 
 
+def stage_run_wrapper(plan, devices, *, md=None):
+    devices = separate_devices(root_ancestor(device) for device in devices)
+    def unstage_devices():
+        for d in reversed(devices):
+            yield Msg('unstage', d)
+    def handle_exception(e):
+        if isinstance(e, RunEngineControlException):
+            yield from close_run(exit_status=e.exit_status)
+        else:
+            yield from close_run(exit_status='fail', reason=str(e))
+        raise e
+
+    try:
+        for d in devices:
+            yield Msg('stage', d)
+    except:
+        yield from unstage_devices()
+        raise
+
+    try:
+        ret = yield from open_run(md)
+        yield from plan
+    except GeneratorExit:
+        raise
+    except Exception as e:
+        try:
+            yield from unstage_devices()
+        finally:
+            yield from handle_exception(e)
+
+    try:
+        yield from unstage_devices()
+    except GeneratorExit:
+        raise
+    except Exception as e:
+        yield from handle_exception(e)
+
+    yield from close_run()
+    return ret
+
+
 def _normalize_devices(devices):
     coupled_parents = set()
     # if we have any pseudo devices then setting any part of it
@@ -1176,6 +1217,7 @@ fly_during_decorator = make_decorator(fly_during_wrapper)
 monitor_during_decorator = make_decorator(monitor_during_wrapper)
 inject_md_decorator = make_decorator(inject_md_wrapper)
 run_decorator = make_decorator(run_wrapper)
+stage_run_decorator = make_decorator(stage_run_wrapper)
 contingency_decorator = make_decorator(contingency_wrapper)
 stub_decorator = make_decorator(stub_wrapper)
 configure_count_time_decorator = make_decorator(configure_count_time_wrapper)
