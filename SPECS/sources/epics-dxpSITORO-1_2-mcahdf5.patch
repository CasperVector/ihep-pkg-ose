diff -ur dxpSITORO-R1-2/dxpApp/src/NDDxp.cpp dxpSITORO-R1-2/dxpApp/src/NDDxp.cpp
--- dxpSITORO-R1-2/dxpApp/src/NDDxp.cpp	2024-08-27 10:32:22.062396481 +0800
+++ dxpSITORO-R1-2/dxpApp/src/NDDxp.cpp	2024-08-27 11:16:33.318709680 +0800
@@ -123,7 +123,7 @@
     uniqueId(0)
 {
     int status = asynSuccess;
-    int i;
+    int i, bins[2];
     int sca;
     char tmpStr[100];
     unsigned short tempUS;
@@ -271,10 +271,6 @@
 
     /* Allocate a memory pointer for each of the channels */
     this->pMcaRaw = (epicsUInt32**) calloc(this->nChannels, sizeof(epicsUInt32*));
-    /* Allocate a memory area for each spectrum */
-    for (i=0; i<this->nChannels; i++) {
-        this->pMcaRaw[i] = (epicsUInt32*)calloc(MAX_MCA_BINS, sizeof(epicsUInt32));
-    }
     
     this->tmpStats = (epicsFloat64*)calloc(28, sizeof(epicsFloat64));
     this->currentBuf = (epicsUInt32*)calloc(this->nChannels, sizeof(epicsUInt32));
@@ -350,6 +346,14 @@
     xiastatus = xiaBoardOperation(0, "get_firmware_version", &tmpStr);
     setStringParam(NDDxpFirmwareVersion, tmpStr);
     
+    bins[1] = 0;
+    for (i=0; i<this->nChannels; i++) {
+        getIntegerParam(i, mcaNumChannels, bins);
+        if (bins[1] < bins[0]) bins[1] = bins[0];
+    }
+    for (i=0; i<this->nChannels; i++) {
+        this->pMcaRaw[i] = (epicsUInt32*)this->pMapRaw + i * bins[1];
+    }
     
     // Enable array callbacks by default
     setIntegerParam(NDArrayCallbacks, 1);
@@ -873,6 +877,9 @@
     }
     
     /* We also need to set the number of channels for the DXP_ALL channel, it is used in mcaErase */
+    for (i=0; i<this->nChannels; i++) {
+        this->pMcaRaw[i] = (epicsUInt32*)this->pMapRaw + i * (*rbValue);
+    }
     setIntegerParam(this->nChannels, mcaNumChannels, *rbValue);
     callParamCallbacks(this->nChannels);
 
@@ -1381,17 +1388,6 @@
             "%s::%s Got MCA spectrum channel:%d ptr:%p\n",
             driverName, functionName, channel, pMcaRaw[addr]);
 
-// In the future we may want to do array callbacks with the MCA data.  For now we are not doing this.
-//        if (arrayCallbacks)
-//       {
-//            /* Allocate a buffer for callback */
-//            pArray = this->pNDArrayPool->alloc(1, &nChannels, dataType, 0, NULL);
-//            pArray->timeStamp = now.secPastEpoch + now.nsec / 1.e9;
-//            pArray->uniqueId = spectrumCounter;
-//            /* TODO: Need to copy the data here */
-//            doCallbacksGenericPointer(pArray, NDArrayData, addr);
-//            pArray->release();
-//       }
     }
     asynPrint(pasynUser, ASYN_TRACE_FLOW, 
         "%s:%s: exit\n",
@@ -1715,6 +1711,8 @@
             /* There must have just been a transition from acquiring to not acquiring */
 
             if (mode == NDDxpModeMCA) {
+                int arrayCallbacks;
+                getIntegerParam(NDArrayCallbacks, &arrayCallbacks);
                 /* In MCA mode we force a read of the data */
                 asynPrint(pasynUser, ASYN_TRACEIO_DRIVER, 
                     "%s::%s Detected acquisition stop! Now reading data\n",
@@ -1724,6 +1722,30 @@
                     "%s::%s Detected acquisition stop! Now reading statistics\n",
                     driverName, functionName);
                 this->getAcquisitionStatistics(this->pasynUserSelf, DXP_ALL);
+                if (arrayCallbacks)
+                {
+                    size_t dims[2]; dims[0] = nChannels; dims[1] = this->nChannels;
+                    int channel, triggers, outputCounts;
+                    double realTime, triggerLiveTime;
+                    NDArray *pArray = this->pNDArrayPool->alloc(2, dims, NDUInt32, 0, NULL);
+                    memcpy(pArray->pData, this->pMapRaw, dims[1] * dims[0] * sizeof(epicsUInt32));
+                    for (channel = 0; channel < this->nChannels; channel++) {
+                        getDoubleParam(channel, mcaElapsedRealTime, &realTime);
+                        getDoubleParam(channel, NDDxpTriggerLiveTime, &triggerLiveTime);
+                        getIntegerParam(channel, NDDxpEvents, &outputCounts);
+                        getIntegerParam(channel, NDDxpTriggers, &triggers);
+                        pArray->pAttributeList->add(attrRealTimeName[channel],     attrRealTimeDescription[channel],     NDAttrFloat64, &realTime);
+                        pArray->pAttributeList->add(attrLiveTimeName[channel],     attrLiveTimeDescription[channel],     NDAttrFloat64, &triggerLiveTime);
+                        pArray->pAttributeList->add(attrTriggersName[channel],     attrTriggersDescription[channel],     NDAttrInt32,   &triggers);
+                        pArray->pAttributeList->add(attrOutputCountsName[channel], attrOutputCountsDescription[channel], NDAttrInt32,   &outputCounts);
+                    }
+                    this->getAttributes(pArray->pAttributeList);
+                    updateTimeStamp(&pArray->epicsTS);
+                    pArray->timeStamp = pArray->epicsTS.secPastEpoch + pArray->epicsTS.nsec / 1.e9;
+                    pArray->uniqueId = this->uniqueId++;
+                    doCallbacksGenericPointer(pArray, NDArrayData, 0);
+                    pArray->release();
+                }
             }
             else {
                 /* In mapping modes need to make an extra call to pollMappingMode because there could be
