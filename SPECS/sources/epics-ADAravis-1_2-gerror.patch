diff -ur ADAravis-R2-2-1-orig/aravisApp/src/ADAravis.cpp ADAravis-R2-2-1/aravisApp/src/ADAravis.cpp
--- ADAravis-R2-2-1-orig/aravisApp/src/ADAravis.cpp	2021-05-27 03:28:34.000000000 +0800
+++ ADAravis-R2-2-1/aravisApp/src/ADAravis.cpp	2022-10-08 16:50:23.000000000 +0800
@@ -103,24 +103,6 @@
     { ARV_PIXEL_FORMAT_BAYER_BG_12,   NDColorModeBayer, NDUInt16, NDBayerBGGR }
 };
 
-// Helper to ensure that GError is free'd
-struct GErrorHelper {
-    GError *err;
-    GErrorHelper() :err(0) {}
-    ~GErrorHelper() {
-        if(err) g_error_free(err);
-    }
-    GError** get() {
-        return &err;
-    }
-    operator GError*() const {
-        return err;
-    }
-    GError* operator->() const {
-        return err;
-    }
-};
-
 /* Convert ArvBufferStatus enum to string */
 const char * ArvBufferStatusToString( ArvBufferStatus buffer_status )
 {
@@ -215,10 +197,9 @@
 /** Called by epicsAtExit to shutdown camera */
 static void aravisShutdown(void* arg) {
     ADAravis *pPvt = (ADAravis *) arg;
-    GErrorHelper err;
     ArvCamera *cam = pPvt->camera;
     printf("ADAravis: Stopping %s... ", pPvt->portName);
-    arv_camera_stop_acquisition(cam, err.get());
+    arv_camera_stop_acquisition(cam, NULL);
     pPvt->connectionValid = 0;
     epicsThreadSleep(0.1);
     pPvt->camera = NULL;
@@ -393,7 +374,7 @@
 asynStatus ADAravis::makeCameraObject() {
     const char *functionName = "makeCameraObject";
 
-    GErrorHelper err;
+    GError *err = NULL;
     /* remove old camera if it exists */
     if (this->camera != NULL) {
         g_object_unref(this->camera);
@@ -405,11 +386,12 @@
 
     /* connect to camera */
     printf ("ADAravis: Looking for camera '%s'... \n", this->cameraName);
-    this->camera = arv_camera_new (this->cameraName, err.get());
+    this->camera = arv_camera_new (this->cameraName, &err);
     if (this->camera == NULL) {
         asynPrint(this->pasynUserSelf, ASYN_TRACE_ERROR,
                     "%s:%s: No camera found, err=%s\n",
                     driverName, functionName, err->message);
+        g_error_free(err); err = NULL;
         return asynError;
     }
     /* Store device */
@@ -422,7 +404,7 @@
     }
     if (ARV_IS_GV_DEVICE(this->device)) {
         // Automatically determine optimum packet size
-        arv_gv_device_auto_packet_size(ARV_GV_DEVICE(this->device), err.get());
+        arv_gv_device_auto_packet_size(ARV_GV_DEVICE(this->device), NULL);
         // Uncomment this line to set jumbo packets
         //arv_gv_device_set_packet_size(ARV_GV_DEVICE(this->device), 9000);
     }
@@ -443,7 +425,7 @@
 asynStatus ADAravis::makeStreamObject() {
     const char *functionName = "makeStreamObject";
     asynStatus status = asynSuccess;
-    GErrorHelper err;
+    GError *err = NULL;
     
     /* remove old stream if it exists */
     if (this->stream != NULL) {
@@ -451,22 +433,24 @@
         g_object_unref(this->stream);
         this->stream = NULL;
     }
-    this->stream = arv_camera_create_stream (this->camera, NULL, NULL, err.get());
+    this->stream = arv_camera_create_stream (this->camera, NULL, NULL, &err);
     if (this->stream == NULL) {
         asynPrint(this->pasynUserSelf, ASYN_TRACE_ERROR,
                     "%s:%s: Making stream failed, err=%s, retrying in 5s...\n",
                     driverName, functionName, err->message);
+        g_error_free(err); err = NULL;
         epicsThreadSleep(5);
         /* make the camera object */
         status = this->makeCameraObject();
         if (status != asynSuccess) return (asynStatus) status;
         /* Make the stream */
-        this->stream = arv_camera_create_stream (this->camera, NULL, NULL, err.get());
+        this->stream = arv_camera_create_stream (this->camera, NULL, NULL, &err);
     }
     if (this->stream == NULL) {
         asynPrint(this->pasynUserSelf, ASYN_TRACE_ERROR,
                     "%s:%s: Making stream failed, err=%s\n",
                     driverName, functionName, err->message);
+        g_error_free(err); err = NULL;
         return asynError;
     }
     
@@ -500,12 +484,11 @@
 asynStatus ADAravis::connectToCamera() {
     const char *functionName = "connectToCamera";
     int status = asynSuccess;
-    GErrorHelper err;
 
     /* stop old camera if it exists */
     this->connectionValid = 0;
     if (this->camera != NULL) {
-        arv_camera_stop_acquisition(this->camera, err.get());
+        arv_camera_stop_acquisition(this->camera, NULL);
     }
 
     /* Tell areaDetector it is no longer acquiring */
@@ -516,12 +499,12 @@
     if (status) return (asynStatus) status;
 
     /* Make sure it's stopped */
-    arv_camera_stop_acquisition(this->camera, err.get());
+    arv_camera_stop_acquisition(this->camera, NULL);
     status |= setIntegerParam(ADStatus, ADStatusIdle);
     
     /* Check the tick frequency */
     if (ARV_IS_GV_DEVICE(this->device)) {
-        guint64 freq = arv_gv_device_get_timestamp_tick_frequency(ARV_GV_DEVICE(this->device), err.get());
+        guint64 freq = arv_gv_device_get_timestamp_tick_frequency(ARV_GV_DEVICE(this->device), NULL);
         printf("ADAravis: Your tick frequency is %" G_GUINT64_FORMAT "\n", freq);
         if (freq > 0) {
             printf("So your timestamp resolution is %f ns\n", 1.e9/freq);
@@ -908,27 +891,26 @@
 
 asynStatus ADAravis::startCapture() {
     int imageMode, numImages;
-    GErrorHelper err;
     const char *functionName = "start";
     
     getIntegerParam(ADImageMode, &imageMode);
 
     if (imageMode == ADImageSingle) {
-        arv_camera_set_acquisition_mode(this->camera, ARV_ACQUISITION_MODE_SINGLE_FRAME, err.get());
+        arv_camera_set_acquisition_mode(this->camera, ARV_ACQUISITION_MODE_SINGLE_FRAME, NULL);
     } else if (imageMode == ADImageMultiple) {
         if (mGCFeatureSet.getByName("AcquisitionFrameCount")) {
             getIntegerParam(ADNumImages, &numImages);
-            arv_device_set_integer_feature_value(this->device, "AcquisitionFrameCount", numImages, err.get());
+            arv_device_set_integer_feature_value(this->device, "AcquisitionFrameCount", numImages, NULL);
         }
-        arv_camera_set_acquisition_mode(this->camera, ARV_ACQUISITION_MODE_MULTI_FRAME, err.get());
+        arv_camera_set_acquisition_mode(this->camera, ARV_ACQUISITION_MODE_MULTI_FRAME, NULL);
     } else {
-        arv_camera_set_acquisition_mode(this->camera, ARV_ACQUISITION_MODE_CONTINUOUS, err.get());
+        arv_camera_set_acquisition_mode(this->camera, ARV_ACQUISITION_MODE_CONTINUOUS, NULL);
     }
     setIntegerParam(ADNumImagesCounter, 0);
     setIntegerParam(ADStatus, ADStatusAcquire);
 
     /* fill the queue */
-    this->payload = arv_camera_get_payload(this->camera, err.get());
+    this->payload = arv_camera_get_payload(this->camera, NULL);
     for (int i=0; i<NRAW; i++) {
         if (this->allocBuffer() != asynSuccess) {
             asynPrint(this->pasynUserSelf, ASYN_TRACE_ERROR,
@@ -939,7 +921,7 @@
     }
 
     // Start the camera acquiring
-    arv_camera_start_acquisition (this->camera, err.get());
+    arv_camera_start_acquisition (this->camera, NULL);
     return asynSuccess;
 }
 
@@ -963,7 +945,6 @@
 /** Lookup an ArvPixelFormat from a colorMode, dataType and bayerFormat */
 asynStatus ADAravis::lookupPixelFormat(int colorMode, int dataType, int bayerFormat, ArvPixelFormat *fmt) {
     const char *functionName = "lookupPixelFormat";
-    GErrorHelper err;
     const int N = sizeof(pix_lookup) / sizeof(struct pix_lookup);
     ArvGcNode *node = arv_gc_get_node(genicam, "PixelFormat");
     for (int i = 0; i < N; i ++)
@@ -975,8 +956,8 @@
                 ArvGcEnumeration *enumeration = (ARV_GC_ENUMERATION (node));
                 const GSList *iter;
                 for (iter = arv_gc_enumeration_get_entries (enumeration); iter != NULL; iter = iter->next) {
-                    if (arv_gc_feature_node_is_available(ARV_GC_FEATURE_NODE(iter->data), err.get()) &&
-                            arv_gc_enum_entry_get_value(ARV_GC_ENUM_ENTRY(iter->data), err.get()) == pix_lookup[i].fmt) {
+                    if (arv_gc_feature_node_is_available(ARV_GC_FEATURE_NODE(iter->data), NULL) &&
+                            arv_gc_enum_entry_get_value(ARV_GC_ENUM_ENTRY(iter->data), NULL) == pix_lookup[i].fmt) {
                         *fmt = pix_lookup[i].fmt;
                         return asynSuccess;
                     }
